# Create a vector `m` that contains the numbers 10 to 1 (in that order).
# Hint: use the `seq()` function
?seq
# Create a vector `m` that contains the numbers 10 to 1 (in that order).
# Hint: use the `seq()` function
m <- seq(10, 1, -1)
# Subtract `m` FROM `n`. Note the recycling!
n - m
# Use the `seq()` function to produce a range of numbers from -5 to 10 in `0.1`
# increments. Store it in a variable `x_range`
x_range <- seq(-5, 10, 0.1)
# Create a vector `sin_wave` by calling the `sin()` function on each element
# in `x_range`.
sin_wave <- sin(x_range)
library(tidyverse)
install(tidyverse)
install.packages("ggplot2")
library(ggplot2)
geom_point(x = x_range, y = sin_wave)
geom_point(x = x_range, y = sin_wave)
geom_point(aes(x = x_range, y = sin_wave))
geom_point(aes(x = x_range, y = sin_wave))
ggplot(aes(x = x_range, y = sin_wave)) + geom_point()
# Create a vector `cos_wave` by calling the `cos()` function on each element
# in `x_range`.
cos_wave <- cos(x_range)
# Create a vector `wave` by multiplying `sin_wave` and `cos_wave` together, then
# adding `sin_wave` to the product
wave <- sin_wave * cos_wave + sin_wave
# Use the `plot()` function to plot your `wave`!
plot(wave)
plot(sin_wave)
# Use the `plot()` function to plot your `wave`!
plot(wave)
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("Burrito", "Soda")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(my_lunch, my_breakfast)
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("Coffee", "Cereal")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("Burrito", "Soda")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(my_lunch, my_breakfast)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals[dinner] = "Burger"
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals["dinner"] = "Burger"
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
meals$dinner
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
dinner <- meals$dinner
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
list[5] <- list[[lunch]]
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
list[5] <- list[[my_lunch]]
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
list[5] <- list[[1]]
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
list[my_lunch]
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
list["my_lunch"]
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
list["lunch"]
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
list[["lunch"]]
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
list[["my_lunch"]]
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(lunch = my_lunch, breakfast = my_breakfast)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals["dinner"] = "Burger"
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
list[["my_lunch"]]
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
list[["lunch"]]
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
list[[lunch]]
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
list[[lunch]]
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[[lunch]]
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[[lunch]]
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[["lunch"]]
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[5] <- meals[["lunch"]]
meals[["lunch"]]
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals{5} <- meals[["lunch"]]
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[[5]] <- meals[["lunch"]]
# Exercise 1: creating and accessing lists
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("Coffee", "Cereal")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("Burrito", "Soda")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(lunch = my_lunch, breakfast = my_breakfast)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals["dinner"] = "Burger"
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
dinner <- meals$dinner
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[[5]] <- meals[["lunch"]]
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
### Challenge ###
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
# Write a function `add_pizza` that adds pizza to a given meal vector, and
# returns the pizza-fied vector
# Create a vector `better_meals` that is all your meals, but with pizza!
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- list(meals[breakfast], meals["lunch"])
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- list(meals["breakfast"], meals["lunch"])
View(early_meals)
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- list(meals[breakfast], meals[lunch])
"
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- list(meals["breakfast"], meals["lunch"])
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- list(meals["breakfast"], meals["lunch"])
?lappy
?lapply
lapply(meals["breakfast"])
lapply(meals["breakfast"], mean)
lapply(meals["breakfast"], mean)
lapply(meals["breakfast"], sum)
lapply(meals["breakfast"], length())
lapply(meals["breakfast"], length())
lapply(meals["breakfast"], length
lapply(meals["breakfast"], length)
lapply(meals["breakfast"], length(meals["breakfast"]))
# Create a *list* of 10 random numbers. Use the `runif()` function to make a
# vector of random numbers, then use `as.list()` to convert that to a list
?runif
# Create a *list* of 10 random numbers. Use the `runif()` function to make a
# vector of random numbers, then use `as.list()` to convert that to a list
runif(10)
# Create a *list* of 10 random numbers. Use the `runif()` function to make a
# vector of random numbers, then use `as.list()` to convert that to a list
as.list(runif(10)
# Create a *list* of 10 random numbers. Use the `runif()` function to make a
# vector of random numbers, then use `as.list()` to convert that to a list
runif(10 +as.list())
# Create a *list* of 10 random numbers. Use the `runif()` function to make a
# vector of random numbers, then use `as.list()` to convert that to a list
runif(10)
# Create a *list* of 10 random numbers. Use the `runif()` function to make a
# vector of random numbers, then use `as.list()` to convert that to a list
rand <- runif(10)
as.list(rand)
rand_list <- as.list(rand)
# Use `lapply()` to apply the `round()` function to each number, rounding it to
# the nearest 0.1 (one decimal place)
round(0.45, 1)
?round
lapply(rand_list, round(digits = 1))
lapply(rand_list, round(rand_list, 1))
?as.list
rand_list <- lis(num = rand)
rand_list <- list(num = rand)
lapply(rand_list, round(rand_list, 1))
rand_list <- as.list(rand)
round_num <- function(num) {
answer <- round(num, 1)
}
round_num(0.12)
round_num(0.12)
round_num(0.12)
round_num(0.12)
lapply(rand_list, round_num)
tolower(She like me but she think that I'm a weirdo
Me and Nino smokin' out the kilo
I'm a fiend, bro, I'm calling for a black crow
I lost my backbone, don't wanna get it back though)
tolower("She like me but she think that I'm a weirdo
Me and Nino smokin' out the kilo
I'm a fiend, bro, I'm calling for a black crow
I lost my backbone, don't wanna get it back though")
a function to help.
sentence <- tolower("She like me but she think that I'm a weirdo
Me and Nino smokin' out the kilo
I'm a fiend, bro, I'm calling for a black crow
I lost my backbone, don't wanna get it back though")
# Use the `strsplit()` function to split the sentence into a vector of letters.
# Hint: split on `""` to split every character
# Note: this will return a _list_ with 1 element (which is the vector of letters)
strsplit(sentence)
?strsplit
# Use the `strsplit()` function to split the sentence into a vector of letters.
# Hint: split on `""` to split every character
# Note: this will return a _list_ with 1 element (which is the vector of letters)
strsplit(sentence, "")
# Use the `strsplit()` function to split the sentence into a vector of letters.
# Hint: split on `""` to split every character
# Note: this will return a _list_ with 1 element (which is the vector of letters)
splitt_sentence <- strsplit(sentence, "")
# Use the `strsplit()` function to split the sentence into a vector of letters.
# Hint: split on `""` to split every character
# Note: this will return a _list_ with 1 element (which is the vector of letters)
split_sentence <- strsplit(sentence, "")
# Extract the vector of letters from the resulting list
split_sentence <- split_sentence[1]
# Extract the vector of letters from the resulting list
split_sentence <- split_sentence[[1]]
# Use the `unique()` function to get a vector of unique letters
?unique
# Use the `unique()` function to get a vector of unique letters
unique_sentence <- unique(split_sentence)
c(unique_sentence)
split_sentence[i]
split_sentence["i"]
split_sentence[names(split_sentence) == "i"]
split_sentence[split_sentence == "i"]
length(split_sentence[split_sentence == "i"])
count_occurences <- function(letter, vector) {
answer <- length(vector[vector == letter])
return(answer)
}
count_occurences(i, split_sentence)
count_occurences("i", split_sentence)
# Call your `count_occurrences()` function to see how many times the letter 'e'
# is in your sentence.
count_occurences("e", split_sentence)
# Use `sapply()` to apply your `count_occurrences()` function to each unique
# letter in the vector to determine their frequencies.
# Convert the result into a list (using `as.list()`).
?sapply
# Use `sapply()` to apply your `count_occurrences()` function to each unique
# letter in the vector to determine their frequencies.
# Convert the result into a list (using `as.list()`).
sapply(split_sentence, count_occurences)
letters
sapply(split_sentence, count_occurences(letters, split_sentence))
count_occurences(letters, split_sentence)
# Storing 2D data in a list of vectors
person1 <- list(first_name = "Miriam", favorite_band = "Red Baraat")
person2 <- list(first_name = "Luis", favorite_band = "The Black Eyed Peas")
preson3 <- list(first_name = "Betty", favorite_band = "The Beattles")
people <- list(
first_name = c("Miriam", "Luis", "Betty"),
favorite_band = c("Red Baraat", "The Black Eyed Peas", "The Beattles")
)
# Storing 2D data in a list of vectors
person1 <- list(first_name = "Miriam", favorite_band = "Red Baraat")
person2 <- list(first_name = "Luis", favorite_band = "The Black Eyed Peas")
preson3 <- list(first_name = "Betty", favorite_band = "The Beattles")
people <- list(
first_name = c("Miriam", "Luis", "Betty"),
favorite_band = c("Red Baraat", "The Black Eyed Peas", "The Beattles")
)
View(people)
people
people$first_name[1]
people$favorite_band[1]
people$first_name[2]
people$favorite_band[2]
people$favorite_band
item <- c("apple", "yogurt", "candy", "banana", "chicken")
# Making data frames:
item <- c("apple", "yogurt", "candy", "banana", "chicken")
price <- c(0.5, 0.2, 1.5, 10, 5)
# Making data frames:
item <- c("apple", "yogurt", "candy", "banana", "chicken")
price <- c(0.5, 0.2, 1.5, 10, 5)
store_items <- data.frame(item, price)
# some functions you can run on a dataframe
nrow(store_items)
ncol(store_items)
dim(store_items)
colnames(store_items)
rownames(store_items)
View(store_items) #only works in RStudio
# list style selection
store_items
# Create a vector of the number of points the Seahawks scored in the first 4 games
# of the season (google "Seahawks" for the scores!)
c(28, 30, 17, 28)
# Combine your two vectors into a dataframe called `games`
games <- data.frame(seahawks_scores, opponent_scores)
# Create a vector of the number of points the Seahawks scored in the first 4 games
# of the season (google "Seahawks" for the scores!)
seahawks_scores <- c(28, 30, 17, 28)
# Create a vector of the number of points the Seahwaks have allowed to be scored
# against them in each of the first 4 games of the season
opponent_scores <- c(16, 33, 30, 21)
# Combine your two vectors into a dataframe called `games`
games <- data.frame(seahawks_scores, opponent_scores)
# Create a new column "diff" that is the difference in points between the teams
# Hint: recall the syntax for assigning new elements (which in this case will be
# a vector) to a list!
diff <- seahawks_scores - opponent_scores
games$diff <- diff
View(games)
# Create a new column "won" which is TRUE if the Seahawks won the game
won <- diff > 0
games$won <- won
# Create a vector of the opponent names corresponding to the games played
opponent <- c("Colts", "Titans", "Vikings", "49ers")
games$opponent
# Exercise 1: creating data frames
# Create a vector of the number of points the Seahawks scored in the first 4 games
# of the season (google "Seahawks" for the scores!)
seahawks_scores <- c(28, 30, 17, 28)
# Create a vector of the number of points the Seahwaks have allowed to be scored
# against them in each of the first 4 games of the season
opponent_scores <- c(16, 33, 30, 21)
# Combine your two vectors into a dataframe called `games`
games <- data.frame(seahawks_scores, opponent_scores)
# Create a new column "diff" that is the difference in points between the teams
# Hint: recall the syntax for assigning new elements (which in this case will be
# a vector) to a list!
diff <- seahawks_scores - opponent_scores
games$diff <- diff
# Create a new column "won" which is TRUE if the Seahawks won the game
won <- diff > 0
games$won <- won
# Create a vector of the opponent names corresponding to the games played
opponent <- c("Colts", "Titans", "Vikings", "49ers")
# Assign your dataframe rownames of their opponents
# View your data frame to see how it has changed!
# Assign your dataframe rownames of their opponents
rownames(opponent)
# Assign your dataframe rownames of their opponents
row.names(opponent)
# Assign your dataframe rownames of their opponents
row.names(opponent)
# Assign your dataframe rownames of their opponents
row.names(games, opponent)
?row.names
# Assign your dataframe rownames of their opponents
row.names(games) <- opponent
View(games)
# Exercise 1: creating data frames
# Create a vector of the number of points the Seahawks scored in the first 4 games
# of the season (google "Seahawks" for the scores!)
seahawks_scores <- c(28, 30, 17, 28)
# Create a vector of the number of points the Seahwaks have allowed to be scored
# against them in each of the first 4 games of the season
opponent_scores <- c(16, 33, 30, 21)
# Combine your two vectors into a dataframe called `games`
games <- data.frame(seahawks_scores, opponent_scores)
# Create a new column "diff" that is the difference in points between the teams
# Hint: recall the syntax for assigning new elements (which in this case will be
# a vector) to a list!
diff <- seahawks_scores - opponent_scores
games$diff <- diff
# Create a new column "won" which is TRUE if the Seahawks won the game
won <- diff > 0
games$won <- won
# Create a vector of the opponent names corresponding to the games played
opponent <- c("Colts", "Titans", "Vikings", "49ers")
# Assign your dataframe rownames of their opponents
row.names(games) <- opponent
# View your data frame to see how it has changed!
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
1 : 100
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- 1 : 100
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- (1 : 100)
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- (1 : 100)
?paste
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employee_numbers <- (1 : 100)
paste("Employee", employee_numbers)
employees <- paste("Employee", employee_numbers)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
?runif()
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
runif(100, 40000, 50000)
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
numbers <- (1 : 100)
employees <- paste("Employee", numbers)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries <- runif(100, 40000, 50000)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
salary_adjustments <- runif(100, -5000, 10000)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salary_now <- runif(100, 40000, 50000)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salary_now, salary_adjustments)
View(salaries)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
new_salary <- salary_now + salary_adjustments
salaries(new_salary) <- new_salary
new_salary <- salary_now + salary_adjustments
salaries(new_salary) <- new_salary
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salary_now, salary_adjustments)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
new_salary <- salary_now + salary_adjustments
salaries(new_salary) <- new_salary
salaries$new_salary <- new_salary
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salary_adjustments> 0
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salary_adjustments > 0
ary went up)
got_raise <- salary_adjustments > 0
salaries$got_raise <- got_raise
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
got_raise <- salary_adjustments > 0
salaries$got_raise <- got_raise
# What was the 2018 salary of Employee 57
salaries$new_salary
# What was the 2018 salary of Employee 57
salaries$new_salary[57]
# How many employees got a raise?
sum(got_raise)
# How many employees got a raise?
sum(salaries$got_raise)
# What was the dollar value of the highest raise?
max(salaries$salary_adjustments)
# What was the "name" of the employee who received the highest raise?
?max
# What was the "name" of the employee who received the highest raise?
max(salaries$salary_adjustments)
# What was the "name" of the employee who received the highest raise?
which.max(salaries$salary_adjustments)
# What was the "name" of the employee who received the highest raise?
salaries$employees[which.max(salaries$salary_adjustments)]
# What was the largest decrease in salaries between the two years?
min(salaries$salary_adjustments)
# What was the name of the employee who recieved largest decrease in salary?
salaries$employees[which.min(salaries$salary_adjustments)]
# What was the average salary change?
mean(salaries$salary_adjustments)
# For people who did not get a raise, how much money did they lose on average?
salary_adjustments[salary_adjustments > 0]
# For people who did not get a raise, how much money did they lose on average?
salary_adjustments[salary_adjustments < 0]
# For people who did not get a raise, how much money did they lose on average?
mean(salary_adjustments[salary_adjustments < 0])
# Write a .csv file of your salary data to your working directory
write.csv(salaries)
# Write a .csv file of your salary data to your working directory
write.csv(salaries)
setwd(C:\Users\stlp\Downloads\Lab3\Lab3)
setwd("C:\Users\stlp\Downloads\Lab3\Lab3")
getwd
getwd
zetwd(C:\Users\stlp\Downloads\Lab3\Lab3)
setwd(C:\Users\stlp\Downloads\Lab3\Lab3)
setwd(\Users\stlp\Downloads\Lab3\Lab3)
setwd(Users\stlp\Downloads\Lab3\Lab3)
setwd(\Downloads\Lab3\Lab3)
setwd(/Users/stlp/Downloads/Lab3/Lab3)
setwd("/Users/stlp/Downloads/Lab3/Lab3")
getwd()
